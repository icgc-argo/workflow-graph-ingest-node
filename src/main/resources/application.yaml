server:
  port : 8082

management:
  endpoints.web.exposure.include: health
  health.binders.enabled: true

spring:
  # Rabbitmq config
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: pass

  # Kafka broker config
  cloud.stream.kafka.binder.brokers: localhost:9092

  # cloud stream config
  cloud.stream:
    function:
      definition: analysisEventToGraphEvent|addAvroContentType # function composition, analogous to pipe operator
      bindings:
        analysisEventToGraphEvent|addAvroContentType-in-0: inbound
        analysisEventToGraphEvent|addAvroContentType-out-0: outbound
    bindings:
      inbound:
        group: publish
        destination: published # kafka topic to listen to
        binder: kafka
      outbound:
        binder: rabbit
        destination: start # rabbitmq exchange/topic to send messages to
        producer.requiredGroups: start-default # default queues created on exchange (comma separated list)
    rabbit.bindings.outbound.producer.exchangeType: fanout
    rabbit.bindings.outbound.producer.queueNameGroupOnly: true
    kafka.bindings.inbound.consumer:
      enableDlq: true
      dlqName: ingest-published-dlq
